"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var fs_extra_1 = __importDefault(require("fs-extra"));
var util_1 = __importDefault(require("util"));
var tmp_1 = __importDefault(require("tmp"));
var path_1 = __importDefault(require("path"));
var css_tree_1 = __importDefault(require("css-tree"));
var helpers_1 = require("./helpers");
var writeFile = util_1.default.promisify(fs_extra_1.default.writeFile);
var readFile = util_1.default.promisify(fs_extra_1.default.readFile);
var ensureDir = util_1.default.promisify(fs_extra_1.default.ensureDir);
module.exports = function (options) {
    if (options === void 0) { options = {}; }
    return ({
        name: "css-modules",
        setup: function (build) {
            var _this = this;
            var _a = options.extension, extension = _a === void 0 ? ".module.css" : _a, _b = options.localIdentName, localIdentName = _b === void 0 ? "[hash]" : _b;
            var rootDir = process.cwd();
            var filter = new RegExp("./.+" + extension.replace(/\./g, "\\.") + "$");
            var tmpDirPath = tmp_1.default.dirSync().name;
            build.onLoad({ filter: filter }, function (args) { return __awaiter(_this, void 0, void 0, function () {
                var relativeDir, fileContent, baseName, folderName, extName, preparedLocalIdentName, ast, classMap, baseFileName, tmpFilePath, contents;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            relativeDir = path_1.default.relative(rootDir, path_1.default.dirname(args.path));
                            return [4 /*yield*/, readFile(args.path)];
                        case 1:
                            fileContent = (_a.sent());
                            baseName = path_1.default.basename(args.path, extension);
                            folderName = path_1.default.basename(path_1.default.dirname(args.path));
                            extName = extension;
                            preparedLocalIdentName = helpers_1.interpolatePattern(localIdentName, function (name) {
                                switch (name) {
                                    case "ext":
                                        return helpers_1.escapeClassName(extName);
                                    case "name":
                                        return helpers_1.escapeClassName(baseName);
                                    case "path":
                                        return helpers_1.escapeClassName(args.path);
                                    case "folder":
                                        return helpers_1.escapeClassName(folderName);
                                }
                                return null;
                            });
                            ast = css_tree_1.default.parse(fileContent.toString());
                            classMap = {};
                            css_tree_1.default.walk(ast, {
                                visit: "ClassSelector",
                                enter: function (node) {
                                    var newClassname = helpers_1.interpolatePattern(preparedLocalIdentName, function (name, params) {
                                        switch (name) {
                                            case "local":
                                                return node.name;
                                            case "hash": {
                                                var lengthRaw = params[0], hashType = params[1], digestType = params[2];
                                                if (hashType !== undefined &&
                                                    !helpers_1.isSupportedHashType(hashType)) {
                                                    throw new Error("Hash algorithm is not supported: " + hashType + ". Supported algorithms: " + helpers_1.SUPPORTED_HASHES.join(", "));
                                                }
                                                if (digestType !== undefined &&
                                                    !helpers_1.isSupportedHashDigest(digestType)) {
                                                    throw new Error("Digest type is not supported: " + digestType + ". Supported digests: " + helpers_1.SUPPORTED_DIGESTS.join(", "));
                                                }
                                                var length_1 = parseInt(lengthRaw) || undefined;
                                                return helpers_1.makeNameHash(args.path + ":" + node.name, length_1, hashType, digestType);
                                            }
                                        }
                                        return null;
                                    });
                                    classMap[node.name] = newClassname;
                                    node.name = newClassname;
                                },
                            });
                            baseFileName = path_1.default.basename(args.path, extension);
                            tmpFilePath = path_1.default.resolve(tmpDirPath, relativeDir, baseFileName + ".css");
                            return [4 /*yield*/, ensureDir(path_1.default.dirname(tmpFilePath))];
                        case 2:
                            _a.sent();
                            // @ts-ignore
                            return [4 /*yield*/, writeFile(tmpFilePath, css_tree_1.default.generate(ast))];
                        case 3:
                            // @ts-ignore
                            _a.sent();
                            contents = "\n        import \"" + tmpFilePath + "\";\n        const result = " + JSON.stringify(classMap) + ";\n        export default result;\n      ";
                            return [2 /*return*/, {
                                    contents: contents,
                                }];
                    }
                });
            }); });
        },
    });
};
