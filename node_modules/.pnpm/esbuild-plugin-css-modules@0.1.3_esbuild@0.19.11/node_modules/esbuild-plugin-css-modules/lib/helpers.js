"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeNameHash = exports.isSupportedHashDigest = exports.isSupportedHashType = exports.SUPPORTED_DIGESTS = exports.SUPPORTED_HASHES = exports.escapeClassName = exports.interpolatePattern = void 0;
var crypto_1 = require("crypto");
var buffer_1 = require("buffer");
function interpolatePattern(string, replacer) {
    var _a;
    var result = "";
    var rest = string;
    while (rest !== "") {
        var match = rest.match(/(\[.+?\])/);
        if (match != null) {
            var text = match[0];
            var index = (_a = match.index) !== null && _a !== void 0 ? _a : 0;
            var match1 = text.match(/^\[(.+)\]$/);
            if (match1 == null) {
                // todo: could this happen?
                throw new Error("Unexpected case");
            }
            var _b = match1[1].split(":"), name_1 = _b[0], params = _b.slice(1);
            var replacedString = replacer(name_1, params);
            result +=
                rest.substr(0, index) +
                    (replacedString == null ? text : replacedString);
            rest = rest.substr(index + text.length);
        }
        else {
            result += rest;
            rest = "";
        }
    }
    return result;
}
exports.interpolatePattern = interpolatePattern;
function escapeClassName(string) {
    return string.replace(/^[^a-zA-Z_]/g, "").replace(/[^a-zA-Z0-9_-]/g, "-");
}
exports.escapeClassName = escapeClassName;
exports.SUPPORTED_HASHES = ["md4", "md5", "sha256", "sha512"];
exports.SUPPORTED_DIGESTS = ["hex", "base64"];
function isSupportedHashType(raw) {
    return exports.SUPPORTED_HASHES.indexOf(raw) !== -1;
}
exports.isSupportedHashType = isSupportedHashType;
function isSupportedHashDigest(raw) {
    return exports.SUPPORTED_DIGESTS.indexOf(raw) !== -1;
}
exports.isSupportedHashDigest = isSupportedHashDigest;
function makeNameHash(name, maxLength, type, digest) {
    if (maxLength === void 0) { maxLength = 32; }
    if (type === void 0) { type = "md4"; }
    if (digest === void 0) { digest = "hex"; }
    var buffer = buffer_1.Buffer.from(name, "utf8");
    var hash = crypto_1.createHash(type);
    hash.update(buffer);
    return "h" + hash.digest(digest).substr(0, maxLength);
}
exports.makeNameHash = makeNameHash;
